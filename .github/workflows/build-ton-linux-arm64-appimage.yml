name: Ubuntu TON build (AppImages, arm64)

on: [push,workflow_dispatch,workflow_call]

jobs:
  build:
    runs-on: ubuntu-22.04-arm

    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:      
        submodules: 'recursive'

    - name: Date Stamp
      shell: bash
      id: date-stamp
      run: |
        echo "timestamp=$(date -u "+%Y%m%d%H%M_%S")" >> "$GITHUB_OUTPUT"

    - name: Install system libraries
      run: |
        sudo apt update
        sudo apt install -y build-essential git cmake ninja-build zlib1g-dev libsecp256k1-dev libmicrohttpd-dev libsodium-dev liblz4-dev ccache libssl-dev
        sudo apt remove libgsl-dev
        mkdir -p ~/.ccache

    # Smart LLVM installation based on Ubuntu version
    - name: Install LLVM/Clang
      run: |
        UBUNTU_VERSION=$(lsb_release -rs)
        echo "Detected Ubuntu version: $UBUNTU_VERSION"
        
        if [[ "$UBUNTU_VERSION" == "24.04" ]]; then
          # Ubuntu 24.04 has newer clang available in default repos
          echo "Installing clang from default repos for Ubuntu 24.04"
          sudo apt-get install -y clang-16 || sudo apt-get install -y clang
        else
          # For older Ubuntu versions, use LLVM script
          echo "Installing clang-16 from LLVM repos for Ubuntu $UBUNTU_VERSION"
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 16 clang || echo "Warning: LLVM script failed, using system clang"
        fi

    - name: Restore cache TON
      uses: actions/cache/restore@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-${{ runner.arch }}-ubuntu-22.04-arm-portable-ccache-${{ steps.date-stamp.outputs.timestamp }}
        restore-keys: ${{ runner.os }}-${{ runner.arch }}-ubuntu-22.04-arm-portable-ccache

    - name: Build TON
      run: |
        git submodule sync --recursive
        git submodule update
        cp assembly/native/build-ubuntu-appimages.sh .
        chmod +x build-ubuntu-appimages.sh
        ./build-ubuntu-appimages.sh -a -c
        ccache -sp

    - name: Save cache TON
      uses: actions/cache/save@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-${{ runner.arch }}-ubuntu-22.04-arm-portable-ccache-${{ steps.date-stamp.outputs.timestamp }}

    - name: Make AppImages
      run: |
        cp assembly/appimage/create-appimages.sh .
        cp assembly/appimage/AppRun .
        cp assembly/appimage/ton.png .
        chmod +x create-appimages.sh
        ./create-appimages.sh aarch64
        rm -rf artifacts

    - name: Save/Restore cache TON libs
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-${{ runner.arch }}-ubuntu-22.04-arm-portable-libs-ccache-${{ steps.date-stamp.outputs.timestamp }}
        restore-keys: ${{ runner.os }}-${{ runner.arch }}-ubuntu-22.04-arm-portable-libs-ccache

    - name: Build TON libs
      run: |
        cp assembly/native/build-ubuntu-portable-libs.sh .
        chmod +x build-ubuntu-portable-libs.sh
        ./build-ubuntu-portable-libs.sh -a -c
        cp ./artifacts/libtonlibjson.so appimages/artifacts/
        cp ./artifacts/libemulator.so appimages/artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ton-arm64-linux
        path: appimages/artifacts

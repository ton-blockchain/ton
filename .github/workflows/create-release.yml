name: Create release

on: [workflow_dispatch]

permissions: write-all

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  prepare-tag:
    runs-on: ubuntu-22.04
    outputs:
      tag: ${{ steps.tag.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Get next tag
        id: tag
        run: |
          git fetch --all --tags
          NEW_TAG=v$(date +'%Y.%m')
          FOUND=$(git tag -l | grep -c "^$NEW_TAG" || true)
          if [ $FOUND -eq 0 ]; then
            echo "TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          else
            echo "TAG=$NEW_TAG-$FOUND" >> $GITHUB_OUTPUT
          fi

  download-artifacts:
    runs-on: ubuntu-22.04
    needs: prepare-tag
    steps:
      - uses: actions/checkout@v4

      # Download all artifacts in parallel (only unpacked versions needed)
      - name: Download Linux arm64 artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-ton-linux-arm64-appimage.yml
          path: artifacts
          workflow_conclusion: success
          branch: master
          skip_unpack: false

      - name: Download Linux x86-64 artifacts  
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-ton-linux-x86-64-appimage.yml
          path: artifacts
          workflow_conclusion: success
          branch: master
          skip_unpack: false

      - name: Download Mac x86-64 artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-ton-macos-13-x86-64-portable.yml
          path: artifacts
          workflow_conclusion: success
          branch: master
          skip_unpack: false

      - name: Download Mac arm64 artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-ton-macos-14-arm64-portable.yml
          path: artifacts
          workflow_conclusion: success
          branch: master
          skip_unpack: false

      - name: Download Windows artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: ton-x86-64-windows.yml
          path: artifacts
          workflow_conclusion: success
          branch: master
          skip_unpack: false

      - name: Download WASM artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-ton-wasm-emscripten.yml
          path: artifacts
          workflow_conclusion: success
          branch: master
          skip_unpack: true

      - name: Download Android Tonlib artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build-ton-linux-android-tonlib.yml
          path: artifacts
          workflow_conclusion: success
          branch: master
          skip_unpack: true

      - name: Show all artifacts
        run: |
          tree artifacts || ls -la artifacts

      # Prepare packaged artifacts for upload
      - name: Create packaged artifacts  
        run: |
          cd artifacts
          # Create zip files for bulk uploads if they don't exist
          [ ! -f ton-x86-64-windows.zip ] && zip -r ton-x86-64-windows.zip ton-x86-64-windows/
          [ ! -f ton-x86_64-macos.zip ] && zip -r ton-x86_64-macos.zip ton-x86_64-macos/
          [ ! -f ton-arm64-macos.zip ] && zip -r ton-arm64-macos.zip ton-arm64-macos/
          [ ! -f ton-x86_64-linux.zip ] && zip -r ton-x86_64-linux.zip ton-x86_64-linux/
          [ ! -f ton-arm64-linux.zip ] && zip -r ton-arm64-linux.zip ton-arm64-linux/

      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

  create-release:
    runs-on: ubuntu-22.04
    needs: [prepare-tag, download-artifacts]
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4

      - name: Read Changelog.md and use it as a body of new release
        id: read_release
        shell: bash
        run: |
          if [ -f recent_changelog.md ]; then
            r=$(cat recent_changelog.md)
            r="${r//'%'/'%25'}"
            r="${r//$'\n'/'%0A'}"
            r="${r//$'\r'/'%0D'}"
            echo "CHANGELOG_BODY=$r" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG_BODY=Release ${{ needs.prepare-tag.outputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-tag.outputs.tag }}
          name: TON ${{ needs.prepare-tag.outputs.tag }}
          body: |
            ${{ steps.read_release.outputs.CHANGELOG_BODY }}
          draft: false
          prerelease: false

  # Parallel upload jobs for better performance
  upload-windows:
    runs-on: ubuntu-22.04
    needs: [prepare-tag, create-release, download-artifacts]
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

      - name: Upload Windows bundle
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/ton-x86-64-windows.zip
          asset_name: ton-win-x86-64.zip
          tag: ${{ needs.prepare-tag.outputs.tag }}

      # Batch upload Windows binaries using gh CLI for efficiency
      - name: Upload Windows binaries
        run: |
          TAG="${{ needs.prepare-tag.outputs.tag }}"
          cd artifacts/ton-x86-64-windows
          
          # Upload all Windows binaries in one command
          gh release upload "$TAG" \
            --repo ${{ github.repository }} \
            fift.exe \
            func.exe \
            tolk.exe \
            lite-client.exe \
            proxy-liteserver.exe \
            rldp-http-proxy.exe \
            http-proxy.exe \
            storage-daemon-cli.exe \
            storage-daemon.exe \
            tonlib-cli.exe \
            tonlibjson.dll \
            emulator.dll#libemulator.dll

  upload-macos-x86:
    runs-on: ubuntu-22.04
    needs: [prepare-tag, create-release, download-artifacts]
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

      - name: Upload Mac x86-64 bundle
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/ton-x86_64-macos.zip
          asset_name: ton-mac-x86-64.zip
          tag: ${{ needs.prepare-tag.outputs.tag }}

      # Batch upload Mac x86-64 binaries using gh CLI for efficiency  
      - name: Upload Mac x86-64 binaries
        run: |
          TAG="${{ needs.prepare-tag.outputs.tag }}"
          cd artifacts/ton-x86_64-macos
          
          # Upload all Mac x86-64 binaries in batches to avoid command line limits
          gh release upload "$TAG" --repo ${{ github.repository }} \
            fift#fift-mac-x86-64 \
            func#func-mac-x86-64 \
            tolk#tolk-mac-x86-64 \
            lite-client#lite-client-mac-x86-64 \
            proxy-liteserver#proxy-liteserver-mac-x86-64 \
            rldp-http-proxy#rldp-http-proxy-mac-x86-64
            
          gh release upload "$TAG" --repo ${{ github.repository }} \
            http-proxy#http-proxy-mac-x86-64 \
            storage-daemon-cli#storage-daemon-cli-mac-x86-64 \
            storage-daemon#storage-daemon-mac-x86-64 \
            tonlib-cli#tonlib-cli-mac-x86-64 \
            libtonlibjson.dylib#tonlibjson-mac-x86-64.dylib \
            libemulator.dylib#libemulator-mac-x86-64.dylib

  upload-macos-arm64:
    runs-on: ubuntu-22.04
    needs: [prepare-tag, create-release, download-artifacts]
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

      - name: Upload Mac arm64 bundle
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/ton-arm64-macos.zip
          asset_name: ton-mac-arm64.zip
          tag: ${{ needs.prepare-tag.outputs.tag }}

      # Batch upload Mac arm64 binaries using gh CLI for efficiency
      - name: Upload Mac arm64 binaries
        run: |
          TAG="${{ needs.prepare-tag.outputs.tag }}"
          cd artifacts/ton-arm64-macos
          
          # Upload all Mac arm64 binaries in batches
          gh release upload "$TAG" --repo ${{ github.repository }} \
            fift#fift-mac-arm64 \
            func#func-mac-arm64 \
            tolk#tolk-mac-arm64 \
            lite-client#lite-client-mac-arm64 \
            proxy-liteserver#proxy-liteserver-mac-arm64 \
            rldp-http-proxy#rldp-http-proxy-mac-arm64
            
          gh release upload "$TAG" --repo ${{ github.repository }} \
            http-proxy#http-proxy-mac-arm64 \
            storage-daemon-cli#storage-daemon-cli-mac-arm64 \
            storage-daemon#storage-daemon-mac-arm64 \
            tonlib-cli#tonlib-cli-mac-arm64 \
            libtonlibjson.dylib#tonlibjson-mac-arm64.dylib \
            libemulator.dylib#libemulator-mac-arm64.dylib

  upload-linux-x86:
    runs-on: ubuntu-22.04
    needs: [prepare-tag, create-release, download-artifacts]
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

      - name: Upload Linux x86-64 bundle
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/ton-x86_64-linux.zip
          asset_name: ton-linux-x86_64.zip
          tag: ${{ needs.prepare-tag.outputs.tag }}

      - name: Upload generic smartcont+lib artifact
        run: |
          mkdir smartcont_lib
          cd smartcont_lib
          cp -r ../artifacts/ton-x86_64-linux/{smartcont,lib} .          
          zip -r smartcont_lib.zip .
          gh release upload ${{ needs.prepare-tag.outputs.tag }} smartcont_lib.zip --repo ${{ github.repository }}

      # Batch upload Linux x86-64 binaries using gh CLI for efficiency
      - name: Upload Linux x86-64 binaries
        run: |
          TAG="${{ needs.prepare-tag.outputs.tag }}"
          cd artifacts/ton-x86_64-linux
          
          # Upload all Linux x86-64 binaries in batches
          gh release upload "$TAG" --repo ${{ github.repository }} \
            fift#fift-linux-x86_64 \
            func#func-linux-x86_64 \
            tolk#tolk-linux-x86_64 \
            lite-client#lite-client-linux-x86_64 \
            proxy-liteserver#proxy-liteserver-linux-x86_64 \
            rldp-http-proxy#rldp-http-proxy-linux-x86_64
            
          gh release upload "$TAG" --repo ${{ github.repository }} \
            http-proxy#http-proxy-linux-x86_64 \
            storage-daemon-cli#storage-daemon-cli-linux-x86_64 \
            storage-daemon#storage-daemon-linux-x86_64 \
            tonlib-cli#tonlib-cli-linux-x86_64 \
            libtonlibjson.so#tonlibjson-linux-x86_64.so \
            libemulator.so#libemulator-linux-x86_64.so


  upload-linux-arm64:
    runs-on: ubuntu-22.04
    needs: [prepare-tag, create-release, download-artifacts]
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

      - name: Upload Linux arm64 bundle
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/ton-arm64-linux.zip
          asset_name: ton-linux-arm64.zip
          tag: ${{ needs.prepare-tag.outputs.tag }}

      # Batch upload Linux arm64 binaries using gh CLI for efficiency
      - name: Upload Linux arm64 binaries
        run: |
          TAG="${{ needs.prepare-tag.outputs.tag }}"
          cd artifacts/ton-arm64-linux
          
          # Upload all Linux arm64 binaries in batches
          gh release upload "$TAG" --repo ${{ github.repository }} \
            fift#fift-linux-arm64 \
            func#func-linux-arm64 \
            tolk#tolk-linux-arm64 \
            lite-client#lite-client-linux-arm64 \
            proxy-liteserver#proxy-liteserver-linux-arm64 \
            rldp-http-proxy#rldp-http-proxy-linux-arm64
            
          gh release upload "$TAG" --repo ${{ github.repository }} \
            http-proxy#http-proxy-linux-arm64 \
            storage-daemon-cli#storage-daemon-cli-linux-arm64 \
            storage-daemon#storage-daemon-linux-arm64 \
            tonlib-cli#tonlib-cli-linux-arm64 \
            libtonlibjson.so#tonlibjson-linux-arm64.so \
            libemulator.so#libemulator-linux-arm64.so

  upload-wasm-android:
    runs-on: ubuntu-22.04
    needs: [prepare-tag, create-release, download-artifacts]
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: artifacts

      # Upload WASM and Android artifacts together since they're smaller
      - name: Upload WASM and Android artifacts
        run: |
          TAG="${{ needs.prepare-tag.outputs.tag }}"
          
          # Upload WASM and Android bundles simultaneously
          gh release upload "$TAG" --repo ${{ github.repository }} \
            artifacts/ton-wasm.zip \
            artifacts/ton-android-tonlib.zip
